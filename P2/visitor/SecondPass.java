//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import SymbolTables.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SecondPass<R,A> implements GJVisitor<R,A> {
   public GlobalSymbolTable g;
   public ClassSymbolTable c;
   public MethodSymbolTable m;
   public boolean resolve;
   public MethodSymbolTable callMethod;
   public int callPos;

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      g = (GlobalSymbolTable) argu;
      c = null;
      m = null;
      resolve = false;
      callMethod = null;
      callPos = 0;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      c = g.classList.get(cname);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      m = new MethodSymbolTable();
      n.f14.accept(this, argu);
      m = null;
      n.f15.accept(this, argu);
      c  = null;
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      c = g.classList.get(cname);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      c = null;
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      c = g.classList.get(cname);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      c  = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String mname = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      m = c.methodList.get(mname);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String retType = (String) n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      if(!g.subTypeOf(retType, m.returnType))
      {
         PrintError.displayMessage("Error: Incompatible types for return expression. Failing!");
      }
      m = null;
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      resolve = true;
      String idType = (String) n.f0.accept(this, argu);
      resolve = false;
      n.f1.accept(this, argu);
      String eType = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!g.subTypeOf(eType, idType))
      {
         PrintError.displayMessage("Error: Incorrect usage of assignment statement. Failing!");
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      resolve = true;
      String idType = (String) n.f0.accept(this, argu);
      resolve = false;
      n.f1.accept(this, argu);
      String eType1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String eType2 = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(idType != "int[]" || eType1 != "int" || eType2 != "int" )
      {
         PrintError.displayMessage("Error: Incorrect usage of Array assignment statement. Failing!");
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String eType = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(eType != "boolean")
      {
         PrintError.displayMessage("Error: Incorrect usage of if-then statement. Failing!");
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String eType = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(eType != "boolean")
      {
         PrintError.displayMessage("Error: Incorrect usage of if-then-else statement. Failing!");
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String eType = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(eType != "boolean")
      {
         PrintError.displayMessage("Error: Incorrect usage of while statement. Failing!");
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String eType = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(eType != "int")
      {
         PrintError.displayMessage("Error: Incorrect usage of print statement. Failing!");
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(etype1 != "boolean" || etype2 != "boolean")
      {
         PrintError.displayMessage("Error: Incorrect usage of pe && pe. Failing!");
      }
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(etype1 != "boolean" || etype2 != "boolean")
      {
         PrintError.displayMessage("Error: Incorrect usage of pe || pe. Failing!");
      }
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(etype1 != "int" || etype2 != "int")
      {
         PrintError.displayMessage("Error: Incorrect usage of pe <= pe. Failing!");
      }
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(!(g.subTypeOf(etype1, etype2) || g.subTypeOf(etype2,etype1)))
      {
         PrintError.displayMessage("Error: Incorrect usage of pe != pe. Failing!");
      }
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(etype1 != "int" || etype2 != "int")
      {
         PrintError.displayMessage("Error: Incorrect usage of pe+pe. Failing!");
      }
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(etype1 != "int" || etype2 != "int")
      {
         PrintError.displayMessage("Error: Incorrect usage of pe-pe. Failing!");
      }
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(etype1 != "int" || etype2 != "int")
      {
         PrintError.displayMessage("Error: Incorrect usage of pe*pe. Failing!");
      }
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      if(etype1 != "int" || etype2 != "int")
      {
         PrintError.displayMessage("Error: Incorrect usage of pe/pe. Failing!");
      }
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(etype1 != "int[]" || etype2 != "int")
      {
         PrintError.displayMessage("Error: Incorrect usage of pe[pe]. Failing!");
      }
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(etype1 != "int[]")
      {
         PrintError.displayMessage("Error: Wrong usage of .length attribute. Failing!");
      }
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String objType = (String) n.f0.accept(this, argu);
      if(g.classList.get(objType) == null)
      {
         PrintError.displayMessage("Error: Unkown type used in function call. Failing!");
      }
      n.f1.accept(this, argu);
      String mname = (String) n.f2.accept(this, argu);
      
      MethodSymbolTable curMethod = g.methodHelper(c.className, objType, mname);
      if(curMethod == null)
      {
         PrintError.displayMessage("Error: Unknown function call. Failing!");
      }
      MethodSymbolTable saveMethod = callMethod;
      int saveCallPos = callPos;
      callMethod = curMethod;
      callPos = 1;

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      if(callPos != (callMethod.paramCount+1))
      {
         PrintError.displayMessage("Error: Too few arguments in function call. Failing!");
      }
      _ret = (R) callMethod.returnType;
      callMethod = saveMethod;
      callPos = saveCallPos;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String etype1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String etype2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String etype3 = (String) n.f4.accept(this, argu);
      String lca = g.leastCommonAncestor(etype2,etype3);
      if(etype1 != "boolean" || lca == null)
      {
         PrintError.displayMessage("Error: Ternary construct error. Failing!");
      }
      _ret = (R) lca;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String argType = (String) n.f0.accept(this, argu);
      String paramType = callMethod.paramTypes.get(callPos);
      if(paramType == null)
      {
         PrintError.displayMessage("Error: Too many arguments in function call. Failing!");
      }
      if(!g.subTypeOf(argType, paramType))
      {
         PrintError.displayMessage("Error: Incompatible argument passed in function call. Failing!");
      }
      ++callPos;
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String argType = (String) n.f1.accept(this, argu);
      String paramType = callMethod.paramTypes.get(callPos);
      if(paramType == null)
      {
         PrintError.displayMessage("Error: Too many arguments in function call. Failing!");
      }
      if(!g.subTypeOf(argType, paramType))
      {
         PrintError.displayMessage("Error: Incompatible argument passed in function call. Failing!");
      }
      ++callPos;      
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      resolve = true;
      _ret = (R) n.f0.accept(this, argu);
      resolve = false;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      if(resolve)
      {
         String type = g.findType(c, m, id);
         if(type == null)
         {
            PrintError.displayMessage("Error : Undeclared variable. Failing!");
         }
         _ret = (R) type;
      }
      else
      {
         _ret = (R) id;
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) c.className;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      resolve = false;
      String etype = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(etype != "int")
      {
         PrintError.displayMessage("Error: type of e != int in new int[e]. Failing!");
      }
      _ret = (R) "int[]";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      resolve = false;
      String etype = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!g.allowedTypes.contains(etype))
      {
         PrintError.displayMessage("Error: Use of unknown type in new Type(). Failing!");
      }
      _ret = (R) etype;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      resolve = false;
      String etype = (String) n.f1.accept(this, argu);
      if(etype != "boolean")
      {
         PrintError.displayMessage("Error: Negation - Expression not of type boolean. Failing!");
      }
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      resolve = false;
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
