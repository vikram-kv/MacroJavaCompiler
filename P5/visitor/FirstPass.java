//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class FirstPass<R,A> implements GJVisitor<R,A> {
   //for printing labels 
   public boolean labelFlag;
   // simple exp choice
   public int simpleExpChoice;
   public String simpleExpValue;
   //for binops;
   public String rsrc1, src2;
   public String opcode;
   //halloc opnd;
   public String hallocString;
   //exp choice
   public int expChoice;
   //spilled arg offset
   public String spilledArgOffset;
   //method parameters
   public int param1, param2, param3;
   //frame offset -- 4 for main, 8 for others
   public int frameOffset;

   public void emit(String s) {
      System.out.println(s);
   }

   public void code_header(String fnname) {
      emit(" \t .text ");
      emit(" \t .globl \t "+fnname);
      emit(" "+fnname+":");
   }

   public void print_call() {
      emit(" \t .text ");
      emit(" \t .globl _print ");
      emit(" _print: ");
      emit(" \t li $v0, 1 ");
      emit(" \t syscall ");
      emit(" \t la $a0, newline ");
      emit(" \t li $v0, 4 ");
      emit(" \t syscall ");
      emit(" \t jr $ra ");
      emit(" \n");
   }
   
   public void halloc_call() {
      emit(" \t .text ");
      emit(" \t .globl _halloc ");
      emit(" _halloc: ");
      emit(" \t li $v0, 9 ");
      emit(" \t syscall ");
      emit(" \t jr $ra ");
      emit(" \n");
   }

   public void error_call() {
      emit(" \t .text ");
      emit(" \t .globl _error ");
      emit(" _error: ");
      emit(" \t li $v0, 4");
      emit(" \t syscall");
      emit(" \t li $v0, 10");
      emit(" \t syscall");
      emit(" \n");
   }

   public void data_call() {
      emit(" \t .data");
      emit(" \t .align 0");
      emit(" newline: \t.asciiz \"\\n\"");
      emit("");
      emit(" \t .data");
      emit(" \t .align 0");
      emit(" error_msg:\t.asciiz \" ERROR : Abnormally terminated!\\n \"");
   }

   public void exit_call() {
      emit(" \t .text ");
      emit(" \t .globl _exitret ");
      emit(" _exitret: ");
      emit(" \t li $v0, 10");
      emit(" \t syscall ");
      emit(" \n");
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      labelFlag = false;
      code_header("main");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      param1 = Integer.parseInt((String) n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      param2 = Integer.parseInt((String) n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      param3 = Integer.parseInt((String) n.f8.accept(this, argu));
      n.f9.accept(this, argu);

      int shift = 4*(1+param2);
      frameOffset = 4;

      emit(" \t move $fp, $sp ");
      emit(" \t sw $ra, -4($sp) ");
      emit(" \t subu $sp, $sp, "+shift);

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      emit(" \t addu $sp, $sp, "+shift);
      emit(" \t lw $ra, -4($fp) ");
      emit(" \t jal _exitret ");
      emit(" \n ");

      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

      halloc_call(); error_call(); print_call(); exit_call();
      data_call();
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      labelFlag = true;
      n.f0.accept(this, argu);
      labelFlag = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String lbl = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      param1 = Integer.parseInt((String) n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      param2 = Integer.parseInt((String) n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      param3 = Integer.parseInt((String) n.f8.accept(this, argu));
      n.f9.accept(this, argu);
      code_header(lbl);

      int shift = 4*(param2+2);

      emit(" \t sw $fp, -8($sp) ");
      emit(" \t move $fp, $sp ");
      emit(" \t sw $ra, -4($sp) ");
      emit(" \t subu $sp, $sp, "+shift);
      frameOffset = 8;

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      emit(" \t addu $sp, $sp, "+shift);
      emit(" \t lw $ra, -4($fp) ");
      emit(" \t lw $fp, -8($fp) ");
      emit(" \t jr $ra ");
      emit("\n ");
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      labelFlag = false;
      n.f0.accept(this, argu);
      labelFlag = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      emit("\t nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      emit(" \t la $a0, error_msg ");
      emit(" \t jal _error ");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String) n.f1.accept(this, argu);
      String lbl = (String) n.f2.accept(this, argu);
      emit("\t bne "+reg+", 1, "+lbl);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lbl = (String) n.f1.accept(this, argu);
      emit("\t b "+lbl);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String) n.f1.accept(this, argu);
      String offset = (String) n.f2.accept(this, argu);
      String reg2 = (String) n.f3.accept(this, argu);
      emit(" \t sw "+reg2+", "+offset+"("+reg1+") ");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String) n.f1.accept(this, argu);
      String reg2 = (String) n.f2.accept(this, argu);
      String offset = (String) n.f3.accept(this, argu);
      emit(" \t lw "+reg1+", "+offset+"("+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(expChoice == 0) {
         if(simpleExpChoice == 0) {
            emit(" \t move $a0, "+simpleExpValue);
         }
         else if(simpleExpChoice == 1) {
            emit(" \t li $a0, "+simpleExpValue);
         }
         emit(" \t jal _halloc");
         emit(" \t move "+reg1+", $v0 ");
      }
      else if(expChoice == 1) {
         emit(" \t "+opcode+" "+reg1+", "+rsrc1+", "+src2);
      }
      else {
         if(simpleExpChoice == 0) {
            emit(" \t move "+reg1+", "+simpleExpValue);
         }
         else if(simpleExpChoice == 1) {
            emit(" \t li "+reg1+", "+simpleExpValue);
         }
         else {
            emit(" \t la "+reg1+", "+simpleExpValue);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(simpleExpChoice == 0) {
         emit(" \t move $a0, "+simpleExpValue);
         emit(" \t jal _print ");
      }
      else if(simpleExpChoice == 1) {
         emit(" \t li $a0, "+simpleExpValue);
         emit(" \t jal _print ");
      }
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      int num = Integer.parseInt(spilledArgOffset);
      int foffset;
      foffset = -4*num-frameOffset-4;
      emit(" \t lw "+reg+", "+foffset+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String reg = (String) n.f2.accept(this, argu);
      int num = Integer.parseInt(spilledArgOffset);
      int foffset;
      foffset = -4*num-frameOffset-4;
      emit(" \t sw "+reg+", "+foffset+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String extargid = (String) n.f1.accept(this, argu);
      String reg = (String) n.f2.accept(this, argu);
      int argid = Integer.parseInt(extargid);
      int offset = -12-4*(argid-1);
      emit(" \t sw "+reg+", "+offset+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(simpleExpChoice == 0) {
         emit(" \t jalr "+simpleExpValue);
      }
      else if(simpleExpChoice == 2) {
         emit(" \t jal "+simpleExpValue);
      }
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      expChoice = n.f0.which;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      rsrc1 = (String) n.f1.accept(this, argu);
      src2 = (String) n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      int choice = n.f0.which;
      switch(choice) {
         case 0: opcode = "sle"; break;
         case 1: opcode = "sne"; break;
         case 2: opcode = "add"; break;
         case 3: opcode = "sub"; break;
         case 4: opcode = "mul"; break;
         case 5: opcode = "div"; break;
      }
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      spilledArgOffset = (String) n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      simpleExpChoice = n.f0.which;
      simpleExpValue = (String) _ret;
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      _ret = (R) ("$"+((String) n.f0.accept(this,argu))); 
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this,argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this,argu);
      if(labelFlag)
      {
         String s = (String) _ret;
         emit(" "+s+":");
      }
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
