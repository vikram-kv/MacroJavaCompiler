//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import SymbolTables.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SecondPass<R,A> implements GJVisitor<R,A> {

   public GlobalSymbolTable g;
   public ClassSymbolTable c;
   public MethodSymbolTable m;
   public int paramId;
   public int tempCounter;
   public int labelCounter;

   public HashMap<String,Integer> localtemps;        //for local variables

   public Integer findVarOffset(String cname,String id)
   {
      String cur = cname;
      while(cur!=null)
      {
         if(g.classList.get(cur).varDecList.get(id)!=null)
         {
            String qname = cur + "_" + id;
            ClassSymbolTable curST = g.classList.get(cur);
            int offset = 1 + curST.obj.elemOffset.get(qname);
            return 4*offset;               
         }
         cur = g.classList.get(cur).parentClassName;
      }
      return null;          
   }
   public Integer findMethodCallOffset(String cname,String mid)
   {
      MethodSymbolTable mst = findMethodMST(cname, mid);
      return (g.classList.get(cname).obj.functionTableOffset.get(mst.ownerClass+'_'+mid));
   }
   public MethodSymbolTable findMethodMST(String cname,String mid)
   {
      String cur = cname;
      while(cur!=null)
      {
         if(g.classList.get(cur).methodList.get(mid)!=null)
         {
            MethodSymbolTable m = g.classList.get(cur).methodList.get(mid);
            return m;           
         }
         cur = g.classList.get(cur).parentClassName;
      }
      return null;          
   }
   public Attribute getTempWithValue(String id)
   {
      if(m.varDecList.get(id)!=null)
      {
         int addr = localtemps.get(id);
         Attribute attr = new Attribute();
         attr.tempAddr = addr;
         return attr;
      }
      else if(m.paramList.get(id)!=null)
      {
         int temp = getNewTemp();
         int pos = m.paramPos.get(id);
         emit(" MOVE TEMP "+temp+" TEMP "+pos);
         Attribute attr = new Attribute();
         attr.tempAddr = temp;
         return attr;
      }
      else
      {
         int offset = findVarOffset(c.className, id);
         int base = getNewTemp();
         int val = getNewTemp();
         emit(" MOVE TEMP "+base+" TEMP 0");
         emit(" HLOAD TEMP "+val+" TEMP "+base+" "+offset);
         Attribute attr = new Attribute();
         attr.tempAddr = val;
         return attr;  
      }
   }
   public Attribute getTempWithAddress(String id)
   {
      if(m.varDecList.get(id)!=null)
      {
         int addr = localtemps.get(id);
         Attribute attr = new Attribute();
         attr.tempAddr = addr;
         return attr;
      }
      else if(m.paramList.get(id)!=null)
      {
         int pos = m.paramPos.get(id);
         Attribute attr = new Attribute();
         attr.tempAddr = pos;
         return attr;
      }
      else
      {
         int offset = findVarOffset(c.className, id);
         int base = getNewTemp();
         int val = getNewTemp();
         emit(" MOVE TEMP "+base+" TEMP 0");
         emit(" MOVE TEMP "+val+" PLUS TEMP "+base+" "+offset);
         Attribute attr = new Attribute();
         attr.tempAddr = val;
         attr.msg = "OBJECT";
         return attr;  
      }
   }
   public void initFunctionTable(int fTableTemp, String objClass)
   {
      AllocObject obj = g.classList.get(objClass).obj;
      ArrayList<String> functions = obj.functionTableList;
      int offset = 0;
      int size = 4*functions.size();
      emit(" MOVE TEMP "+fTableTemp+" HALLOCATE "+size);
      int lblHolder = getNewTemp();
      for(String fn : functions)
      {
         String s = obj.overList.get(fn);
         if(s == null)
         {
            emit(" MOVE TEMP "+lblHolder+" "+fn);
            emit(" HSTORE TEMP "+fTableTemp+" "+offset+" TEMP "+lblHolder);
            offset += 4;
         }
         else
         {
            emit(" MOVE TEMP "+lblHolder+" "+s);
            emit(" HSTORE TEMP "+fTableTemp+" "+offset+" TEMP "+lblHolder);
            offset += 4;            
         }
      }
   }
   public String findType(String id)
   {
      if(m.varDecList.get(id)!=null)
      {
         return m.varDecList.get(id);
      }
      else if(m.paramList.get(id)!=null)
      {
         return m.paramList.get(id);
      }
      else
      {
         String cur = c.className;
         while(cur!=null)
         {
            if((g.classList.get(cur)).varDecList.get(id)!=null)
            {
               return (g.classList.get(cur)).varDecList.get(id);                   // cur_id
            }
            cur = g.classList.get(cur).parentClassName;
         }
         return null;    
      }
   }
   public void initObject(int objTemp,int fTableTemp,String objClass)
   {
      int objSize  = 4*(g.classList.get(objClass).obj.size);
      int lbl1 = getNewLabel();
      int lbl2 = getNewLabel();
      int offset = getNewTemp();
      int loc = getNewTemp();
      int flag = getNewTemp();
      int zero = getNewTemp();
      emit(" MOVE TEMP "+objTemp+" HALLOCATE "+objSize);
      emit(" HSTORE TEMP "+objTemp+" 0 TEMP "+fTableTemp);
      emit(" MOVE TEMP "+zero+" 0");
      emit(" MOVE TEMP "+offset+" 4");
      emit(" L"+lbl1+" NOOP");
      emit(" MOVE TEMP "+flag+" LE "+"TEMP "+offset+" " +(objSize-1));
      emit(" CJUMP TEMP " + flag + " L" + lbl2);
      emit(" MOVE TEMP "+loc+" PLUS TEMP "+offset+" TEMP " + objTemp);
      emit(" HSTORE TEMP "+loc+" 0 TEMP "+zero);
      emit(" MOVE TEMP "+offset+" PLUS TEMP "+offset+" 4");
      emit(" JUMP L"+lbl1);
      emit(" L"+lbl2+" NOOP");
      return ;
   }
   public void emit(String s)
   {
      System.out.println(s);
   }
   public int getNewLabel()
   {
      labelCounter += 1;
      return (labelCounter - 1);
   }
   public int getNewTemp()
   {
      tempCounter += 1;
      return (tempCounter - 1);
   }
   public SecondPass(GlobalSymbolTable g)
   {
      super();
      this.g = g;
      this.c = null;
      this.m = null;
      this.paramId = 0;
      this.tempCounter = 30;
      this.labelCounter = 1;
      this.localtemps = new HashMap<String,Integer>();
      this.localtemps.clear();
   }
   public String leastCommonAncestor(String type1,String type2)
   {
      
      if(type1 == "" || type2 == "")
      {
         return "";
      }
      else if(type1 == type2)
      {
         return type1;
      }
      else 
      {
         
         ArrayList<String> p1,p2;
         p1 = new ArrayList<String>();
         String par = type1;
         while(par!=null)
         {
            p1.add(par);
            par = g.classList.get(par).parentClassName;
         }
         p2 = new ArrayList<String>();
         par = type2;
         while(par!=null)
         {
            p2.add(par);
            par = g.classList.get(par).parentClassName;
         }
         for(String v : p1)
         {
            if(p2.contains(v))
            {
               return v;
            }
         }
         return null;
      }
   }
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = (String) n.f1.f0.tokenImage;
      c = g.classList.get(cname);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      emit(" MAIN");
      m = new MethodSymbolTable();
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      emit(" END");
      m = null;
      n.f16.accept(this, argu);
      c = null;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = n.f1.f0.tokenImage;
      c = g.classList.get(cname);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      c = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = n.f1.f0.tokenImage;
      c = g.classList.get(cname);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      c = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String vname = n.f1.f0.tokenImage;
      n.f2.accept(this, argu);
      if(argu != null)
      {
         Attribute attr = (Attribute) (argu);
         if(attr.msg == "AllocateTemp")
         {
            int temp = getNewTemp();
            localtemps.put(vname,temp);
         }
      }
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String mname = n.f2.f0.tokenImage;
      m = c.methodList.get(mname);
      int count = m.paramCount + 1;
      emit(" "+c.className+"_"+mname+"["+count+"]");
      emit(" BEGIN");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      Attribute attr = new Attribute();
      attr.msg = "AllocateTemp";
      n.f7.accept(this, (A) attr);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      Attribute ret = (Attribute) n.f10.accept(this, argu);
      emit(" RETURN TEMP "+ret.tempAddr);
      n.f11.accept(this, argu);
      emit(" END");
      localtemps.clear();
      m = null;
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      Attribute attr = getTempWithAddress(id);

      n.f1.accept(this, argu);
      Attribute value = (Attribute) n.f2.accept(this, argu);
      if(attr.msg == "OBJECT")
      {
         int targetAddress = attr.tempAddr;
         int source = value.tempAddr;
         emit(" HSTORE TEMP "+targetAddress+" 0 TEMP "+source);
      }
      else
      {
         int target = attr.tempAddr;
         int source = value.tempAddr;
         emit(" MOVE TEMP "+target+" TEMP "+source);
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      Attribute attr = getTempWithAddress(id);
      n.f1.accept(this, argu);
      
      Attribute index = (Attribute) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Attribute value = (Attribute) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(attr.msg == "OBJECT")
      {
         int target = attr.tempAddr;
         int source = value.tempAddr;
         int idx = index.tempAddr;
         int base = getNewTemp();
         int offset = getNewTemp();
         int address = getNewTemp();
         emit(" MOVE TEMP "+offset+" PLUS TEMP "+idx+" 1");
         emit(" MOVE TEMP "+offset+" TIMES TEMP "+offset+" 4");
         emit(" HLOAD TEMP "+base+" TEMP "+target+" 0");
         emit(" MOVE TEMP "+address+" PLUS TEMP "+base+" TEMP "+offset);
         emit(" HSTORE TEMP "+address+" 0 "+" TEMP "+source);
      }
      else
      {
         int base = attr.tempAddr;
         int source = value.tempAddr;
         int idx = index.tempAddr;
         int offset = getNewTemp();
         int address = getNewTemp();
         emit(" MOVE TEMP "+offset+" PLUS TEMP "+idx+" 1");
         emit(" MOVE TEMP "+offset+" TIMES TEMP "+offset+" 4");
         emit(" MOVE TEMP "+address+" PLUS TEMP "+base+" TEMP "+offset);
         emit(" HSTORE TEMP "+address+" 0 "+" TEMP "+source);        
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int trueLbl = getNewLabel();
      int falseLbl = getNewLabel();
      Attribute attr = (Attribute) n.f2.accept(this, argu);
      int eval = attr.tempAddr;
      n.f3.accept(this, argu);
      emit(" CJUMP TEMP "+eval+" L"+falseLbl);
      emit(" L"+trueLbl+" NOOP");
      n.f4.accept(this, argu);
      emit(" L"+falseLbl+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int trueLbl = getNewLabel();
      int falseLbl = getNewLabel();
      int endLbl = getNewLabel();
      Attribute attr = (Attribute) n.f2.accept(this, argu);
      int eval = attr.tempAddr; 
      emit(" CJUMP TEMP "+eval+" L"+falseLbl);
      n.f3.accept(this, argu);
      emit(" L"+trueLbl+" NOOP");
      n.f4.accept(this, argu);
      emit(" JUMP L"+endLbl);
      n.f5.accept(this, argu);
      emit(" L"+falseLbl+" NOOP");
      n.f6.accept(this, argu);
      emit(" L"+endLbl+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int begLbl = getNewLabel();
      int endLbl =  getNewLabel();
      emit(" L"+begLbl+" NOOP");
      Attribute attr = (Attribute) n.f2.accept(this, argu);
      int eval = attr.tempAddr;
      emit(" CJUMP TEMP "+eval+" L"+endLbl);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      emit(" JUMP L"+begLbl);
      emit(" L"+endLbl+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Attribute attr = (Attribute) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      emit(" PRINT TEMP "+attr.tempAddr);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      int flbl = getNewLabel();
      int endlLbl = getNewLabel();
      int res = getNewTemp();
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      int eval1 = attr1.tempAddr;
      emit(" CJUMP TEMP "+eval1+" L"+flbl);
      n.f1.accept(this, argu);
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      int eval2 = attr2.tempAddr;
      emit(" CJUMP TEMP "+eval2+" L"+flbl);
      emit(" MOVE TEMP "+res+" 1");
      emit(" JUMP L"+endlLbl);
      emit(" L"+flbl+" NOOP");
      emit(" MOVE TEMP "+res+" 0");
      emit(" L"+endlLbl+" NOOP");
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      int tlbl = getNewLabel();
      int endLbl = getNewLabel();
      int res = getNewTemp();
      int dummy = getNewTemp();
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      int eval1 = attr1.tempAddr;
      emit(" MOVE TEMP "+dummy+" 1");
      emit(" MOVE TEMP "+dummy+" MINUS TEMP "+dummy+" TEMP "+eval1);
      emit(" CJUMP TEMP "+dummy+" L"+tlbl);
      n.f1.accept(this, argu);
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      int eval2 = attr2.tempAddr;
      emit(" MOVE TEMP "+dummy+" 1");
      emit(" MOVE TEMP "+dummy+" MINUS TEMP "+dummy+" TEMP "+eval2);
      emit(" CJUMP TEMP "+dummy+" L"+tlbl);
      emit(" MOVE TEMP "+res+" 0");
      emit(" JUMP L"+endLbl);
      emit(" L"+tlbl+" NOOP");
      emit(" MOVE TEMP "+res+" 1");
      emit(" L"+endLbl+" NOOP");
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      int op1 = attr1.tempAddr;
      int op2 = attr2.tempAddr;
      int res = getNewTemp();
      emit(" MOVE TEMP "+res+" LE TEMP "+op1+" TEMP "+op2);
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      int op1 = attr1.tempAddr;
      int op2 = attr2.tempAddr;
      int res = getNewTemp();
      emit(" MOVE TEMP "+res+" NE TEMP "+op1+" TEMP "+op2);
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      int op1 = attr1.tempAddr;
      int op2 = attr2.tempAddr;
      int res = getNewTemp();
      emit(" MOVE TEMP "+res+" PLUS TEMP "+op1+" TEMP "+op2);
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      int op1 = attr1.tempAddr;
      int op2 = attr2.tempAddr;
      int res = getNewTemp();
      emit(" MOVE TEMP "+res+" MINUS TEMP "+op1+" TEMP "+op2);
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      int op1 = attr1.tempAddr;
      int op2 = attr2.tempAddr;
      int res = getNewTemp();
      emit(" MOVE TEMP "+res+" TIMES TEMP "+op1+" TEMP "+op2);
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      int op1 = attr1.tempAddr;
      int op2 = attr2.tempAddr;
      int res = getNewTemp();
      emit(" MOVE TEMP "+res+" DIV TEMP "+op1+" TEMP "+op2);
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      Attribute attr1 = (Attribute) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int eval1 = attr1.tempAddr;
      Attribute attr2 = (Attribute) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      int eval2 = attr2.tempAddr;
      int res = getNewTemp();
      int offset = getNewTemp();
      emit(" MOVE TEMP "+offset+" PLUS TEMP "+eval2+" 1");
      emit(" MOVE TEMP "+offset+" TIMES TEMP "+offset+" 4");
      emit(" MOVE TEMP "+offset+" PLUS TEMP "+eval1+" TEMP "+offset);
      emit(" HLOAD TEMP "+res+" TEMP "+offset+" 0");
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      Attribute attr = (Attribute) n.f0.accept(this, argu);
      int base = attr.tempAddr;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      int res = getNewTemp();
      emit(" HLOAD TEMP "+res+" TEMP "+base+" 0");
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      Attribute attr = (Attribute) n.f0.accept(this, argu);
      int objAddress = attr.tempAddr;
      String objClass = attr.msg;
      n.f1.accept(this, argu);
      String mname = (String) n.f2.accept(this, argu);
      //changes needed here
      int offset = findMethodCallOffset(objClass,mname);
      ArrayList<Integer> exprTemps = new ArrayList<Integer>();
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) exprTemps);
      n.f5.accept(this, argu);
      int res = getNewTemp();
      int fnAddrs = getNewTemp();
      offset *= 4;
      int temp = getNewTemp();
      emit(" MOVE TEMP "+temp+" TEMP "+objAddress);
      emit(" HLOAD TEMP "+temp+" TEMP "+temp+" 0");
      emit(" MOVE TEMP "+temp+" PLUS TEMP "+temp+" "+offset);
      emit(" HLOAD TEMP "+fnAddrs+" TEMP "+temp+" 0");
      System.out.print(" MOVE TEMP "+res+" CALL TEMP "+fnAddrs+" ( TEMP "+objAddress);
      for(Integer i : exprTemps)
      {
         System.out.print(" TEMP "+i);
      }
      System.out.println(")");
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      MethodSymbolTable mst = findMethodMST(objClass, mname);
      ret.msg = mst.returnType;
      _ret = (R) ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      Attribute attr = (Attribute) n.f0.accept(this, argu);
      int eval = attr.tempAddr;
      int res = getNewTemp();
      int falseLbl = getNewLabel();
      int endLbl = getNewLabel();
      emit(" CJUMP TEMP "+eval+" L"+falseLbl);
      n.f1.accept(this, argu);
      Attribute attr1 = (Attribute) n.f2.accept(this, argu);
      int eval1 = attr1.tempAddr;
      n.f3.accept(this, argu);
      emit(" MOVE TEMP "+res+" TEMP "+eval1);
      emit(" JUMP L"+endLbl);
      emit(" L"+falseLbl+ " NOOP");
      Attribute attr2 = (Attribute) n.f4.accept(this, argu);
      int eval2 = attr2.tempAddr;
      emit(" MOVE TEMP "+res+" TEMP "+eval2);
      emit(" L"+endLbl+ " NOOP");      
      Attribute ret = new Attribute();
      ret.tempAddr = res;
      
      ret.msg = leastCommonAncestor(attr1.msg, attr2.msg);
      _ret = (R) ret;      
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      Attribute attr = (Attribute) n.f0.accept(this, argu);
      ArrayList<Integer> a = (ArrayList<Integer>) argu;
      a.add(attr.tempAddr);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Attribute attr = (Attribute) n.f1.accept(this, argu);
      ArrayList<Integer> a = (ArrayList<Integer>) argu;
      a.add(attr.tempAddr);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      if(n.f0.which == 3)
      {
         String id = (String) n.f0.accept(this,argu);
         Attribute attr = getTempWithValue(id);
         attr.msg = findType(id);
         _ret = (R) attr;
      }
      else if(n.f0.which == 4)
      {
         n.f0.accept(this,argu);
         Attribute attr = new Attribute();
         int obj = getNewTemp();
         emit(" MOVE TEMP "+obj+" TEMP 0");
         attr.tempAddr = obj;
         attr.msg = c.className;
         _ret = (R) attr;
      }
      else
      {
         _ret =  n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String s = n.f0.tokenImage;
      int temp = getNewTemp();
      int value = Integer.parseInt(s);
      emit(" MOVE TEMP "+temp+" "+value);
      Attribute attr = new Attribute();
      attr.tempAddr = temp;
      _ret = (R) attr;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int temp = getNewTemp();
      int value = 1;
      emit(" MOVE TEMP "+temp+" "+value);
      Attribute attr = new Attribute();
      attr.tempAddr = temp;
      _ret = (R) attr;      
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int temp = getNewTemp();
      int value = 0;
      emit(" MOVE TEMP "+temp+" "+value);
      Attribute attr = new Attribute();
      attr.tempAddr = temp;
      _ret = (R) attr;      
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String id = n.f0.tokenImage;
      _ret = (R) id;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      String id = n.f0.tokenImage;
      _ret = (R) id;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Attribute attr = (Attribute) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int size = attr.tempAddr;
      int base = getNewTemp();
      int extSize = getNewTemp();
      int flag = getNewTemp();
      int loc = getNewTemp();
      int zero = getNewTemp();
      int offset = getNewTemp();
      int lbl1 = getNewLabel();
      int lbl2 = getNewLabel();
      emit(" MOVE TEMP "+extSize+" TIMES TEMP "+size+" 4");
      emit(" MOVE TEMP "+extSize+" PLUS TEMP "+extSize+" 4");
      emit(" MOVE TEMP "+base+" HALLOCATE TEMP "+extSize);
      emit(" HSTORE TEMP "+base+" 0 TEMP "+size);

      // init of alloc memory
      emit(" MOVE TEMP "+extSize+" MINUS TEMP "+extSize+" 1");
      emit(" MOVE TEMP "+zero+" 0");
      emit(" MOVE TEMP "+offset+" 4");
      emit(" L"+lbl1+" NOOP");
      emit(" MOVE TEMP "+flag+" LE "+"TEMP "+offset+" TEMP "+extSize);
      emit(" CJUMP TEMP " + flag + " L" + lbl2);
      emit(" MOVE TEMP "+loc+" PLUS TEMP "+offset+" TEMP " + base);
      emit(" HSTORE TEMP "+loc+" 0 TEMP "+zero);
      emit(" MOVE TEMP "+offset+" PLUS TEMP "+offset+" 4");
      emit(" JUMP L"+lbl1);
      emit(" L"+lbl2+" NOOP");
      Attribute resAttr = new Attribute();
      resAttr.tempAddr = base;
      _ret = (R) resAttr;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      int fTableTemp = getNewTemp();
      initFunctionTable(fTableTemp, cname);
      int objTemp = getNewTemp();
      initObject(objTemp, fTableTemp, cname);
      Attribute attr = new Attribute();
      attr.tempAddr = objTemp;
      attr.msg = cname;
      _ret = (R) attr;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Attribute attr = (Attribute) n.f1.accept(this, argu);
      int loc = attr.tempAddr;
      int temp = getNewTemp();
      int one = getNewTemp();
      emit(" MOVE TEMP "+one+" 1");
      emit(" MOVE TEMP "+temp+" MINUS TEMP "+one+" TEMP "+loc);
      Attribute resAttr = new Attribute(attr);
      resAttr.tempAddr = temp;
      _ret = (R) resAttr;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}