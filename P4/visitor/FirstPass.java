//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import Helper.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class FirstPass<R,A> implements GJVisitor<R,A> {

   public ProcedureList allProcedures;
   public ProcData curProcedure;
   public ArrayList<UsageDefn> curUDList;
   public HashSet<Integer> curProcCalls;
   public boolean addUseFlag;
   public UsageDefn addUD;
   
   public boolean labelFlag;
   public HashMap<String,Integer> curLabMapping;
   public int curInsnCount;

   public FirstPass(ProcedureList p){
      this.allProcedures = p;
      curProcedure = null;
      curProcCalls = null;
      curUDList = null;
      addUseFlag = false;
      addUD = null;

      labelFlag = false;
      curLabMapping = null;
      curInsnCount = 0;
   }
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      //label map generator code
      curInsnCount = 0;
      curLabMapping = new HashMap<String,Integer>();
      labelFlag = false;

      curProcedure = new ProcData();
      curUDList = new ArrayList<UsageDefn>();
      curProcCalls = new HashSet<Integer>();
      String mname = "MAIN";
      curProcedure.fname = mname;
      curProcedure.argcount = 0;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      curProcedure.insnUDList = curUDList;
      curProcedure.calledProcArgs = curProcCalls;
      curProcedure.labelInsnMapping = curLabMapping;
      allProcedures.procedures.put(mname,curProcedure);
      curProcedure = null;
      curUDList = null;
      curProcCalls = null;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      labelFlag = true;
      n.f0.accept(this, argu);
      labelFlag = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String mname = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int argcount = Integer.parseInt((String) n.f2.accept(this, argu));
      n.f3.accept(this, argu);


      // label generator code
      curInsnCount = 0;
      curLabMapping = new HashMap<String,Integer>();


      curProcedure = new ProcData();
      curUDList = new ArrayList<UsageDefn>();
      curProcCalls = new HashSet<Integer>();
      curProcedure.fname = mname;
      curProcedure.argcount = argcount;

      n.f4.accept(this, argu);

      curProcedure.insnUDList = curUDList;
      curProcedure.calledProcArgs = curProcCalls;
      curProcedure.labelInsnMapping = curLabMapping;
      allProcedures.procedures.put(mname,curProcedure);
      curProcedure = null;
      curUDList = null;
      curProcCalls = null;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ++curInsnCount;
      labelFlag = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      labelFlag = false;

      n.f0.accept(this, argu);
      UsageDefn ud = new UsageDefn();
      curUDList.add(ud);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      labelFlag = false;

      n.f0.accept(this, argu);
      UsageDefn ud = new UsageDefn();
      curUDList.add(ud);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      labelFlag = false;

      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      String lbl = (String) n.f2.accept(this, argu);

      UsageDefn ud = new UsageDefn();
      ud.uses.add(temp);
      ud.targets.add(lbl);
      ud.jumpFlag = false;
      curUDList.add(ud);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      labelFlag = false;

      n.f0.accept(this, argu);
      String lbl = (String) n.f1.accept(this, argu);
      UsageDefn ud = new UsageDefn();
      curUDList.add(ud);
      ud.targets.add(lbl);
      ud.jumpFlag = true;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      labelFlag = false;

      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String temp2 = (String) n.f3.accept(this, argu);
      UsageDefn ud = new UsageDefn();
      ud.uses.add(temp1);
      ud.uses.add(temp2);
      curUDList.add(ud);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      labelFlag = false;

      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      UsageDefn ud = new UsageDefn();
      ud.defns.add(temp1);
      ud.uses.add(temp2);
      curUDList.add(ud);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      labelFlag = false;

      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      UsageDefn ud = new UsageDefn();
      ud.defns.add(temp);
      addUseFlag = true;
      addUD = ud;      
      n.f2.accept(this, argu);
      addUD = null;
      addUseFlag = false;
      curUDList.add(ud);
      //for calls
      if(n.f2.f0.which == 0)
      {
         curProcCalls.add(ud.uses.size()-1);
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      labelFlag = false;

      n.f0.accept(this, argu);
      String s = (String) n.f1.accept(this, argu);
      UsageDefn ud = new UsageDefn();
      if(s.contains("TEMP "))
         ud.uses.add(s);
      curUDList.add(ud);      
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String s =(String) n.f3.accept(this, argu);
      UsageDefn ud = new UsageDefn();
      if(s.contains("TEMP "))
         ud.uses.add(s);
      curUDList.add(ud);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String num = (String) n.f1.accept(this, argu);
      String temp = ("TEMP "+num);
      _ret = (R) (temp);
      if(addUseFlag)
      {
          addUD.uses.add(temp);
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      if(labelFlag)
      {
         String label = (String) _ret;
         curLabMapping.put(label,curInsnCount);
      }
      return _ret;
   }
}
